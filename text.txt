API are machanisms that elable software components to connect with each other, like frontend apps and a backend

without needing an API backend can interact with frontend by famous architecture known as monolothic architecture, where backend and frontend are tightly coupled, disadvantage is when
there is problem or change in any component whole architecture will be affected, also backend data can also not be shared across different applications

using the API endpoints backend information will be available across the web, Api response is given in json which is compatible with all languages

FAST API is python framework for creating industry grade Api's, based on 2 python libraries: starlette and pydantic :
starlette manages how api recieves requests and sends back responses while pydantic checks if data coming in API is correct and in right format

FAST API solve performance and latency issues, FAST API is fast to run and fast to code

FAST API has ASGI(Asynchronous Server Gateway Interface which is of asynchronous nature, multiple requests sent together), while Flask has WSGI(synchronous nature) implemented by
Werkzeug library, Django uses both WSGI and ASGI, WSGI for traditional and ASGI for Chatbot, real time applications, etc.

pydantic provide automatic input validation, also in fast api automatic interactive documentation is created, seemless integrations to SQL, docker,etc is also given through fast api

start build api:
pip install fastapi uvicorn pydantic
cd project directory (Fast_Api)
uvicorn main:app --reload

status code:
200 success
300 further action required
400 something wrong from client requests
500 server side error

video5